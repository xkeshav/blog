<main class="w-full relative min-h-screen w-full flex items-center justify-center overflow-hidden">
  <div
    class="-z-10 w-70 h-70 blur-150 -translate-y-1/2 lg:(w-90vw h-80vw -translate-y-3/5 -translate-x-1/2 blur-300px left-1/2) rounded-full absolute top-0 scale-y-70% bg-purple"
  >
  </div>

  <div class="z-90 flex p-8 lg:p-0 flex-col gap-8 sm:(gap-12 text-center items-center justify-center) text-white">
    <h1 class="text-4xl sm:text-6xl lg:text-7xl 2xl:text-8xl font-heading font-black text-white">Enthusiastic developer</h1>
    <p class="text-sm max-w-3xl sm:text-xl 2xl:max-w-4xl font-300 font-sans opacity-70 tracking-wide leading-relaxed">
      The main parts of what I do are building the internet, solving problems, exploring new technologies and learning new wonderfull
      things.
    </p>
    <a href="/about">
      <div class="p-2px bg-gradient-to-l from-#b56cfd to-#7558b8 rounded-full w-fit">
        <div class="px-4 py-2 text-sm sm:text-xl lg:(px-12 py-4) bg-gradient-to-l from-#9d53d6 to-#6245b7 rounded-full">About me</div>
      </div>
    </a>
  </div>
  <div
    class="absolute w-full top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 -z-11 overflow-hidden flex items-center justify-center opacity-50 sm:opacity-100"
  >
    <canvas width="1000" height="1000" id="herocanvas" class="w-1000px h-1000px" aria-hidden="true"> </canvas>
  </div>
</main>

<script>
  window.onload = () => {
    const canvas = document.getElementById('herocanvas') as HTMLCanvasElement;
    const ctx = canvas.getContext('2d', { alpha: true })!;

    const radius = 700;
    const width = radius * 2.5;
    const height = width;
    const hWidth = width / 2;
    const hHeight = height / 2;
    const particles = [];
    const particlesCount = Math.min(100, Math.floor(window.innerWidth / 10));
    const defaultPartSpeed = 0.005;

    let bgOpacity = 1;
    let isWarping = false;

    canvas.width = canvas.width = width;
    canvas.height = canvas.height = height;

    class Particle {
      radius: number;
      time: number;
      speed: number;
      hue: number;
      u: number;
      v: number;
      θ: number;
      φ: number;
      x: number;
      y: number;
      z: number;
      size: number;

      constructor(isRandomRadius: boolean) {
        this.radius = isRandomRadius ? Math.random() * radius : radius;
        this.time = 0;
        this.speed = isRandomRadius ? Math.random() / 200 : defaultPartSpeed;
        this.hue = 220 + 100 * Math.random();
        this.u = Math.random();
        this.v = Math.random();
        this.θ = 0;
        this.φ = 0;
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.size = 0;

        this.updatePosition();
      }

      updatePosition() {
        this.time -= this.speed;

        this.θ = 2 * Math.PI * this.u + this.time;
        this.φ = Math.acos(2 * this.v - 1) - Math.PI * 0.5;

        this.x = this.radius * Math.sin(this.θ) * Math.cos(this.φ);
        this.y = this.radius * Math.sin(this.φ);
        this.z = this.radius * Math.cos(this.φ) * Math.cos(this.θ);

        this.size = (this.radius * 1.4 - this.z) / 25;
      }

      getColor(ctx: CanvasRenderingContext2D) {
        const x = this.x + hWidth;
        const y = this.y + hHeight;

        const gradient = ctx.createRadialGradient(x, y, 0, x, y, this.size);

        gradient.addColorStop(0, `hsla(${this.hue}, 100%, 60%, 1)`);
        gradient.addColorStop(0.3, `hsla(${this.hue}, 100%, 60%, 0)`);
        gradient.addColorStop(1, `hsla(${this.hue}, 100%, 60%, 0)`);

        return gradient;
      }

      render(ctx: CanvasRenderingContext2D) {
        const x = this.x + hWidth;
        const y = this.y + hHeight;
        const radius = this.size / 2;

        ctx.fillStyle = this.getColor(ctx);
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, Math.PI * 2);
        ctx.fill();
      }

      get data() {
        return {
          x: this.x,
          y: this.y,
          z: this.z,
          size: this.size,
          color: `hsla(${this.hue}, 100%, 60%, 1)`,
        };
      }
    }

    for (let i = 0; i < particlesCount; i++) {
      particles.push(new Particle(true));
    }

    void (function loop() {
      isWarping ? (bgOpacity -= 0.1) : (bgOpacity += 0.1);
      bgOpacity > 1 && (bgOpacity = 1);
      bgOpacity < 0.1 && (bgOpacity = 0.1);

      ctx.clearRect(0, 0, width, height);

      for (let i = 0; i < particles.length; i++) {
        particles[i].updatePosition();
        particles[i].render(ctx);
      }

      window.requestAnimationFrame(loop);
    })();
  };
</script>
